name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR
        run: |
          ECR_REGISTRY="${{ steps.ecr-login.outputs.registry }}"
          ECR_REPOSITORY="css-battle"
          IMAGE_TAG="${{ github.sha }}"  # tag unique basé sur le commit

          # 1. Construire l'image (en forçant l'arch AMD64 si besoin)
          docker build -t $ECR_REPOSITORY .

          # 2. Tagger et pousser
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update Lambda function code
        run: |
          ECR_REGISTRY="${{ steps.ecr-login.outputs.registry }}"
          ECR_REPOSITORY="css-battle"
          IMAGE_TAG="${{ github.sha }}"
          FUNCTION_NAME="css-battle"

          # Met à jour l'image de la fonction
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update Lambda environment variables
        run: |
          FUNCTION_NAME="css-battle"

          # Ici on injecte la variable Slack depuis GitHub Secrets
          aws lambda update-function-configuration \
            --function-name $FUNCTION_NAME \
            --environment "Variables={SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}}"
